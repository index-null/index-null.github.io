<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ShiciAPI Usage</title>
      <link href="/chushing/2024/07/21/test/"/>
      <url>/chushing/2024/07/21/test/</url>
      
        <content type="html"><![CDATA[<h2 id="1-我应该选择哪个调用方式？"><a href="#1-我应该选择哪个调用方式？" class="headerlink" title="1. 我应该选择哪个调用方式？"></a>1. 我应该选择哪个调用方式？</h2><ul><li><code>普通网站、博客</code> 调用，使用 <strong><a href="https://www.jinrishici.com/doc/#json-fast">网站快速安装</a></strong></li><li><code>小程序</code> 调用，使用 <strong><a href="https://www.jinrishici.com/doc/#mini-program">小程序 SDK</a></strong></li><li><code>Vue</code> 、 <code>React</code> 等框架，使用 <strong><a href="https://www.jinrishici.com/doc/#npm">NPM 快速安装</a></strong></li><li><code>安卓 APP</code> 调用，使用 <strong><a href="https://www.jinrishici.com/doc/#android-sdk">安卓 SDK</a></strong></li><li>IOS、桌面端等非浏览器环境，使用 <strong><a href="https://www.jinrishici.com/doc/#json">高级 JSON 接口</a></strong></li><li>在 <code>论坛</code> 、文章等不支持 HTML 的地方调用，使用 <strong><a href="https://www.jinrishici.com/doc/#image">图片形式调用</a></strong></li><li>后端调用、服务器调用、微信公众号调用，本接口不支持，可使用 <strong><a href="https://www.jinrishici.com/doc/#brother">旧API接口</a></strong></li><li>浏览器插件、IOS 捷径调用，使用 <strong><a href="https://www.jinrishici.com/doc/#json-standard">捷径&#x2F;浏览器插件接口</a></strong></li></ul><table><thead><tr><th></th><th>为了提高推荐的效果，请您正确选择调用方式。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>原则上，为了获取到正确的 <code>IP</code> 定位信息，我们的接口都不应在服务端调用。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="2-网站快速安装"><a href="#2-网站快速安装" class="headerlink" title="2. 网站快速安装"></a>2. 网站快速安装</h2><p>为了方便您的调用，我们特意开发了一款 JS-SDK 供您快速部署。这款SDK帮您完成了 <a href="https://www.jinrishici.com/doc/#json">高级 JSON 接口</a> 的所有步骤。</p><table><thead><tr><th></th><th>浏览器能直接打开的网站才能使用本方法部署</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="2-1-通用简单安装代码"><a href="#2-1-通用简单安装代码" class="headerlink" title="2.1. 通用简单安装代码"></a>2.1. 通用简单安装代码</h3><p>在 HTML 中需要加载诗词的地方放置以下加载代码即可,和 <strong>网站统计</strong> 的安装方法一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;</span><br><span class="line">&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>SDK 会自动寻找 <code>id</code> 或者 <code>class</code> 为 <code>jinrishici-sentence</code> 的标签，将里面的内容替换为诗词</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>如果需要在多个地方显示诗词，添加多个 class&#x3D;” <code>jinrishici-sentence</code> “ 的 span 即可</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="2-2-通用高级安装代码"><a href="#2-2-通用高级安装代码" class="headerlink" title="2.2. 通用高级安装代码"></a>2.2. 通用高级安装代码</h3><p>如果你有其他需求（如获取作者、朝代等），可以调用我们提供的加载函数 <code>jinrishici.load</code> 并传入回调函数，每调用一次，会传入一个新的诗词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  jinrishici.load(function(result) &#123;</span><br><span class="line">    // 自己的处理逻辑</span><br><span class="line">    console.log(result)</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>result 的 格式见 <a href="https://www.jinrishici.com/doc/#return">接口返回结果格式</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>出错我们会帮你打在控制台上，您无需再次处理。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>使用定制加载时，不要将标签的 id 或者 class 设置为 <code>jinrishici-sentence</code> ，否则SDK会自动加载一次</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th>使用 <code>load</code> 之前，请确保 SDK JS 文件已经引入</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>一个高级版的使用例子，可以复制到一个 HTML 文件用浏览器打开查看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;poem_sentence&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;poem_info&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  jinrishici.load(function(result) &#123;</span><br><span class="line">    var sentence = document.querySelector(&quot;#poem_sentence&quot;)</span><br><span class="line">    var info = document.querySelector(&quot;#poem_info&quot;)</span><br><span class="line">    sentence.innerHTML = result.data.content</span><br><span class="line">    info.innerHTML = &#x27;【&#x27; + result.data.origin.dynasty + &#x27;】&#x27; + result.data.origin.author + &#x27;《&#x27; + result.data.origin.title + &#x27;》&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-博客-论坛简单安装示例"><a href="#2-3-博客-论坛简单安装示例" class="headerlink" title="2.3. 博客&#x2F;论坛简单安装示例"></a>2.3. 博客&#x2F;论坛简单安装示例</h3><p>本示例适用于 Wordpress &#x2F; Typecho &#x2F; Emlog &#x2F; Hexo &#x2F; Hugo 等博客和 Discuz &#x2F; PHPwind &#x2F; Xiuno 等论坛。</p><p>您想添加一句诗词到您的网站，您需要找到您选择使用的模板的相应位置。加入快速安装代码即可。</p><p>如果您找不到，可以使用文本搜索附近的 HTML 代码关键字。</p><p>比如，您想添加到页脚，一般您需要修改 <code>footer.php</code>，加入安装代码即可。</p><p>需要注意的是，不要把安装代码粘贴到 <?php 和 ?> 中间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer id=&quot;footer&quot; role=&quot;contentinfo&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;</span><br><span class="line">    &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &amp;copy; &lt;?php echo date(&#x27;Y&#x27;); ?&gt; &lt;a href=&quot;&lt;?php $this-&gt;options-&gt;siteUrl(); ?&gt;&quot;&gt;&lt;?php $this-&gt;options-&gt;title(); ?&gt;&lt;/a&gt;.</span><br><span class="line">    &lt;?php _e(&#x27;由 &lt;a href=&quot;http://www.typecho.org&quot;&gt;Typecho&lt;/a&gt; 强力驱动&#x27;); ?&gt;.</span><br><span class="line">&lt;/footer&gt;&lt;!-- end #footer --&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>可能有一些同学受其他 hitokoto 一言 API 的影响，认为可以直接在服务器用 PHP 的 curl 等方法直接请求接口，这在本接口是 <strong>完全错误</strong> 的。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="3-小程序-SDK"><a href="#3-小程序-SDK" class="headerlink" title="3. 小程序 SDK"></a>3. 小程序 SDK</h2><p>如果您使用微信小程序调用我们的接口，我们也为您准备了SDK。这款SDK帮您实现了 [<a href="https://www.jinrishici.com/doc/#token">token]</a> 的所有步骤</p><p><code>第一步</code> ， <a href="https://sdk.jinrishici.com/v2/mini-program/jinrishici.js">点击下载小程序SDK文件</a></p><p><code>第二步</code>，放置在您的小程序目录，一般是 &#x2F;utils 下</p><p><code>第三步</code>，在微信后台添加我们的API地址到白名单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://v2.jinrishici.com</span><br></pre></td></tr></table></figure><p><code>第四步</code>，在您需要调用的 Page 的 JS 文件最上面，引用我们的SDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const jinrishici = require(&#x27;../../utils/jinrishici.js&#x27;)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>请注意文件夹深度，确保文件地址正确。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><code>第五步</code>，在 JS 文件的 onLoad 处 或者其他地方，调用我们的加载函数，您需要传一个回调函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jinrishici.load(result =&gt; &#123;</span><br><span class="line">  // 下面是处理逻辑示例</span><br><span class="line">  console.log(result)</span><br><span class="line">  this.setData(&#123;&quot;jinrishici&quot;: result.data.content&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>result</code> 的格式见 <a href="https://www.jinrishici.com/doc/#return">接口返回结果格式</a></p><h2 id="4-NPM-快速安装"><a href="#4-NPM-快速安装" class="headerlink" title="4. NPM 快速安装"></a>4. NPM 快速安装</h2><p>如果你使用 Vue 、 React 等框架，或使用 Webpack 工作流，可以通过 npm 快速安装我们的 SDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -i jinrishici --save</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>该 NPM 包仅支持浏览器环境，不支持 Node 环境，不支持服务器渲染，本接口需要获取客户端数据，所以也不能服务端渲染。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>安装好后，可以在页面的启动函数中引入 SDK ，并调用 <code>load</code> 函数，传入一个处理结果的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const jinrishici = require(&#x27;jinrishici&#x27;);</span><br><span class="line">jinrishici.load(result =&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回结果 <code>result</code> 的格式见 <a href="https://www.jinrishici.com/doc/#return">接口返回结果格式</a></p><p>你也可以再传一个错误处理函数处理加载错误时的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const jinrishici = require(&#x27;jinrishici&#x27;);</span><br><span class="line">jinrishici.load(result =&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;, errData =&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通常，你应该在页面加载完之后调用 <code>load</code> 方法，比如 Vue 的 mounted 钩子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  loadSentence: function() &#123;</span><br><span class="line">    jinrishici.load(result =&gt; &#123;</span><br><span class="line">      this.msg = result.data.content</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      console.log(&quot;test&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: function()&#123;this.loadSentence()&#125;</span><br></pre></td></tr></table></figure><h2 id="5-安卓-SDK"><a href="#5-安卓-SDK" class="headerlink" title="5. 安卓 SDK"></a>5. 安卓 SDK</h2><p>通过安装安卓 SDK 您可以快速集成今日诗词 API 到您的安卓 APP 上。</p><p>Maven 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.jinrishici&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;android-sdk&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Gradle 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.jinrishici:android-sdk:1.5&#x27;</span><br></pre></td></tr></table></figure><p>在调用获取今日诗词的接口之前任何地方调用初始化方法（控件形式调用可跳过）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//以下两种初始化方式任选一种即可</span><br><span class="line">JinrishiciFactory.init(getContext());</span><br><span class="line">JinrishiciClient.getInstance().init(getContext());</span><br></pre></td></tr></table></figure><p>这一步是为了初始化 SharedPreference 的存储，让今日诗词的 token 能够存储到客户端设备上，从而避免推荐重复</p><p>调用时，您有三种方法调用：</p><p><code>第一种</code> ：异步方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JinrishiciClient client = JinrishiciClient.getInstance();</span><br><span class="line">client.getOneSentenceBackground(new JinrishiciCallback() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void done(PoetySentence poetySentence) &#123;</span><br><span class="line">//TODO do something</span><br><span class="line">//在这里进行你的逻辑处理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void error(JinrishiciRuntimeException e) &#123;</span><br><span class="line">Log.w(TAG, &quot;error: code = &quot; + e.getCode() + &quot; message = &quot; + e.getMessage());</span><br><span class="line">//TODO do something else</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>第二种</code>：同步方法，当请求出现错误时会抛出 JinrishiciRuntimeException ，请自行捕获进行处理。同步异步方法二选一即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PoetySentence poetySentence = JinrishiciClient.getInstance().getOneSentence();</span><br></pre></td></tr></table></figure><p><code>第三种</code>：自定义控件。</p><p>同样，sdk也提供自定义控件，你只需要将控件添加进布局中，无需处理相关逻辑，控件会自动请求数据并展示到控件上 如果使用自定义控件的方式，那么不用手动调用初始化的方法，控件会自动调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.jinrishici.sdk.android.view.JinrishiciTextView</span><br><span class="line">android:id=&quot;@+id/jinrisiciTextView&quot;</span><br><span class="line">android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">android:textColor=&quot;@color/colorAccent&quot;</span><br><span class="line">android:textSize=&quot;18sp&quot; /&gt;</span><br><span class="line">&lt;!--你可以像使用TextView那样对JinrishiciTextView进行设置--&gt;</span><br><span class="line">&lt;!--如示例代码中的textColor和textSize属性--&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>支持数据类型</th><th>备注</th></tr></thead><tbody><tr><td>jrsc_refresh_on_click</td><td>boolean</td><td>点击TextView时是否刷新</td></tr><tr><td>jrsc_show_error</td><td>boolean</td><td>当请求出现错误时，是否直接将错误信息显示到TextView上</td></tr><tr><td>jrsc_show_loading_text</td><td>boolean</td><td>是否在加载数据时显示加载文本</td></tr><tr><td>jrsc_text_loading</td><td>string</td><td>加载数据时显示的文本</td></tr><tr><td>jrsc_text_error</td><td>string</td><td>加载失败时显示的文本</td></tr></tbody></table><p>DEMO APP，SDK 源代码，SDK 最新文档，见： <a href="https://github.com/xenv/jinrishici-sdk-android/">Github</a></p><p>安卓 SDK 作者为 <a href="https://mystery0.vip/">mystery0</a> ，特此感谢</p><h2 id="6-高级-JSON-接口"><a href="#6-高级-JSON-接口" class="headerlink" title="6. 高级 JSON 接口"></a>6. 高级 JSON 接口</h2><p>本接口是 今日诗词 API 的核心接口。返回格式为 JSON 。</p><p>今日诗词接口免费版 <strong>不支持服务端调用</strong> ，<strong>不支持浏览器调用（浏览器只能使用 SDK）</strong>，仅支持客户端调用，详见 <a href="https://www.jinrishici.com/doc/#back-end">服务器端可以调用吗？</a></p><p><a href="https://www.jinrishici.com/doc/#json-fast">网站快速安装</a> , <a href="https://www.jinrishici.com/doc/#mini-program">小程序 SDK</a> , <a href="https://www.jinrishici.com/doc/#npm">NPM 快速安装</a> , <a href="https://www.jinrishici.com/doc/#android-sdk">安卓 SDK</a> 均实现了本接口，您可以选择使用他们。</p><p>如果您是 IOS、桌面端的开发者，您需要通过手动调用本接口来获取诗词推荐。</p><p>如果您确实需要在浏览器中手动调用本接口，请直接查看 [<a href="https://www.jinrishici.com/doc/#browser">browser]</a></p><p>基本原理是，对于每一个客户端，都先获取一个新的 Token，Token和该客户绑定，类似“登录”，然后储存在硬盘上，之后该客户端的每次请求都附带这个 Token，这样，我们就可以知道这个客户端的调用历史。 Token 是永久有效的，只要用户不手动清除，则可以一直保留。</p><p>调用本接口，您需要：</p><ol><li>对于每一个用户第一次访问，先使用 <a href="https://www.jinrishici.com/doc/#get-token">获取 Token</a> ，然后存到 <code>Storage</code> 里面。（ <code>Storage</code> 表示一些长效的储存机制，如 localStorage ，您 <strong>不应该存储到运行内存</strong> 中）</li><li>之后每一次接口调用，把 <code>Token</code> 从 <code>Storage</code> 里面拿出来。</li><li>使用 <a href="https://www.jinrishici.com/doc/#send-token">附带 Token 的接口</a> ， 发送附带 <code>Token</code> 的请求。</li></ol><p>调用接口写好后，请使用 <a href="https://www.jinrishici.com/doc/#test">接口测试</a></p><table><thead><tr><th></th><th>虽然您不附带 Token 也可以正常访问我们的接口，但是对于不带 Token 的访问，我们每次都会自动创建一个新 Token。单个 IP 签发多个 Token 会导致诗词推荐质量下降。但要注意，不同用户之间请不要使用同一个 Token</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="6-1-获取-Token"><a href="#6-1-获取-Token" class="headerlink" title="6.1. 获取 Token"></a>6.1. 获取 Token</h3><p><code>Token</code> 用于鉴别和区分每个用户，获取后 <strong>永久有效</strong></p><p>获取 Token 的地址为，GET 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://v2.jinrishici.com/token</span><br></pre></td></tr></table></figure><p>返回的 Token 在 <code>data</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &quot;RgU1rBKtLym/MhhYIXs42WNoqLyZeXY3EkAcDNrcfKkzj8ILIsAP1Hx0NGhdOO1I&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-附带-Token-的接口"><a href="#6-2-附带-Token-的接口" class="headerlink" title="6.2. 附带 Token 的接口"></a>6.2. 附带 Token 的接口</h3><p>GET 方法，地址为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://v2.jinrishici.com/sentence</span><br></pre></td></tr></table></figure><p>您需要在 HTTP 的 <code>Headers</code> 头中指定 <code>Token</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-User-Token:RgU1rBKtLym/MhhYIXs42WNoqLyZeXY3EkAcDNrcfKkzj8ILIsAP1Hx0NGhdOO1I</span><br></pre></td></tr></table></figure><p>返回结果在此查看 <a href="https://www.jinrishici.com/doc/#return">接口返回结果格式</a></p><h3 id="6-3-接口测试"><a href="#6-3-接口测试" class="headerlink" title="6.3. 接口测试"></a>6.3. 接口测试</h3><p>为了保证接口的成功安装，您需要进行接口测试。</p><p>您可以直接用 <a href="https://www.jinrishici.com/doc/#send-token">附带 Token 的接口</a> 做简单的测试，重点是，<strong>对于同一个用户， <code>token</code> 字段每次调用应该保持一致</strong> ，如果不一致则 <strong>安装错误</strong> 。请重新阅读文档或 <a href="https://www.jinrishici.com/doc/#contact">联系我们</a> , <a href="https://www.jinrishici.com/doc/#qqun">QQ群</a></p><p>另外，您也可以调用我们的高级测试接口：</p><p>GET方法，接口地址为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://v2.jinrishici.com/info</span><br></pre></td></tr></table></figure><p>额外的 <code>Headers</code> （可选）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-User-Token:5894fcba-0f9b-435e-b460-bb02d19b8974</span><br></pre></td></tr></table></figure><p>正常返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;token&quot;: &quot;5894fcba-0f9b-435e-b460-bb02d19b8974&quot;,</span><br><span class="line">        &quot;ip&quot;: &quot;215.17.40.175&quot;,</span><br><span class="line">        &quot;region&quot;: &quot;广东|深圳&quot;,</span><br><span class="line">        &quot;weatherData&quot;: &#123;</span><br><span class="line">            &quot;temperature&quot;: 26,</span><br><span class="line">            &quot;windDirection&quot;: &quot;东风&quot;,</span><br><span class="line">            &quot;windPower&quot;: 1,</span><br><span class="line">            &quot;humidity&quot;: 91,</span><br><span class="line">            &quot;updateTime&quot;: &quot;23:10&quot;,</span><br><span class="line">            &quot;weather&quot;: &quot;雨&quot;,</span><br><span class="line">            &quot;visibility&quot;: &quot;33.43km&quot;,</span><br><span class="line">            &quot;rainfall&quot;: 0,</span><br><span class="line">            &quot;pm25&quot;: 23</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;tags&quot;: [</span><br><span class="line">            &quot;桂花&quot;,</span><br><span class="line">            &quot;华南&quot;,</span><br><span class="line">            &quot;雨&quot;,</span><br><span class="line">            &quot;秋&quot;,</span><br><span class="line">            &quot;晚上&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;beijingTime&quot;: &quot;2018-09-17T23:47:48.194228&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果满足以下条件，则说明您的调用是正确的</p><ol><li>对于同一用户，多次调用的 Token 是同一个</li><li>IP 是用户的 IP，region 识别正常</li></ol><h2 id="7-捷径-浏览器插件接口"><a href="#7-捷径-浏览器插件接口" class="headerlink" title="7. 捷径&#x2F;浏览器插件接口"></a>7. 捷径&#x2F;浏览器插件接口</h2><p>如果您用浏览器直接打开我们的接口地址，则自动使用我们的浏览器直接访问接口（原标准 JSON 接口），我们会自动向您发送一个 Cookies，作用和 Token 等效。</p><p><a href="https://v2.jinrishici.com/one.json">https://v2.jinrishici.com/one.json</a></p><p>此接口 <strong>仅适用于浏览器直接访问</strong> ，<strong>不适用于网站调用</strong>，应用场景包括：浏览器插件、IOS 捷径访问。如果您贪方便在其他地方直接调用本接口，可能会触发我们的系统判断，导致诗词推荐质量下降。</p><p>实际调用本接口时，请务必进行 <a href="https://www.jinrishici.com/doc/#test">接口测试</a> 确保 Token 每次一致。</p><h2 id="8-接口返回结果格式"><a href="#8-接口返回结果格式" class="headerlink" title="8. 接口返回结果格式"></a>8. 接口返回结果格式</h2><p><a href="https://www.jinrishici.com/doc/#npm">NPM 快速安装</a> , <a href="https://www.jinrishici.com/doc/#mini-program">小程序 SDK</a>, <a href="https://www.jinrishici.com/doc/#json-fast">网站快速安装</a> 高级版，<a href="https://www.jinrishici.com/doc/#json">高级 JSON 接口</a> 接口返回的正常的数据格式为：</p><p>正确返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;5b8b9572e116fb3714e6faba&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;君问归期未有期，巴山夜雨涨秋池。&quot;,</span><br><span class="line">        &quot;popularity&quot;: 1170000,</span><br><span class="line">        &quot;origin&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;夜雨寄北&quot;,</span><br><span class="line">            &quot;dynasty&quot;: &quot;唐代&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;李商隐&quot;,</span><br><span class="line">            &quot;content&quot;: [</span><br><span class="line">                &quot;君问归期未有期，巴山夜雨涨秋池。&quot;,</span><br><span class="line">                &quot;何当共剪西窗烛，却话巴山夜雨时。&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;translate&quot;: [</span><br><span class="line">                &quot;您问归期，归期实难说准，巴山连夜暴雨，涨满秋池。&quot;,</span><br><span class="line">                &quot;何时归去，共剪西窗烛花，当面诉说，巴山夜雨况味。&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;matchTags&quot;: [</span><br><span class="line">            &quot;秋&quot;,</span><br><span class="line">            &quot;晚上&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;recommendedReason&quot;: &quot;&quot;,</span><br><span class="line">        &quot;cacheAt&quot;: &quot;2018-09-17T21:18:44.693645&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;token&quot;: &quot;6453911a-9ad7-457e-9b9d-c21011b85a0c&quot;,</span><br><span class="line">    &quot;ipAddress&quot;: &quot;162.248.93.154&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中</p><p><code>data.content</code> 是核心，即推荐的诗句</p><p><code>data.matchTags</code> 是与你相关的标签，也是推荐给你的部分理由。</p><p><code>data.recommendedReason</code> 是推荐原因，暂未支持。</p><p><code>data.cacheAt</code> 是指我们会对每个 <code>Token</code> 进行预生成推荐数据并缓存。正常情况下我们会10分钟更新一次缓存数据。</p><p><code>data.popularity</code> 是我们对这句诗的流行度评价</p><p><code>data.origin</code> 源诗信息</p><p><code>data.origin.translate</code> 是整诗翻译，部分诗词有，部分没有</p><p><code>token</code> 是当前用户的 <code>token</code> ，原则上，同一个用户，一段时间内 Token 应该不变。</p><p><code>ipAddress</code> 是当前用户的 <code>ip</code> ，如果 IP 有异常，您需要查明您是否在服务端调用</p><p>错误返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;error&quot;,</span><br><span class="line">    &quot;errCode&quot;: 2001,</span><br><span class="line">    &quot;errMessage&quot;: &quot;No matching handler&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>errcode</code> 是错误码，目前只有以下几种错误码，您也简单判断 HTTP 头中的状态码，对于错误返回，我们总不会返回 200</p><p><code>1001</code> ：内部服务器错误，HTTP状态码 500</p><p><code>1002</code> ：API路径不对，HTTP状态码 404</p><p><code>2002</code> ：Token不是服务器签发，HTTP状态码 400</p><p><code>2003</code> ：IP超过每日新用户限制，HTTP状态码 400，这很有可能是您没有正确保存 Cookies 或者 Token</p>]]></content>
      
      
      <categories>
          
          <category> Life Musing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Feature-branch dev-flow</title>
      <link href="/chushing/2024/07/20/Git%E5%A4%9A%E4%BA%BA%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
      <url>/chushing/2024/07/20/Git%E5%A4%9A%E4%BA%BA%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Git多人协作开发流程"><a href="#Git多人协作开发流程" class="headerlink" title="Git多人协作开发流程"></a>Git多人协作开发流程</h1><h2 id="1-克隆远程仓库"><a href="#1-克隆远程仓库" class="headerlink" title="1. 克隆远程仓库"></a>1. 克隆远程仓库</h2><p>首先，每个开发者需要从远程仓库克隆项目到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库URL&gt;</span><br></pre></td></tr></table></figure><p>具体的步骤可以参考<a href="https://help.github.com/articles/cloning-a-repository/">GitHub帮助文档-Cloning a repository</a>。</p><blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>从GitHub克隆仓库，配置SSH公钥通常是一个很好的实践。具体可以参考<a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/">GitHub SSH公钥配置</a>。</p><p>远程分支在本地,通常是以<code>origin/branch-name</code>的形式表示。它的作用只是<strong>指示远程分支的开发进度</strong>,并不会干扰本地分支。<br>实际上只有在远程仓库上创建了分支，或者将本地分支push到了远程仓库,才会有远程分支。</p></blockquote><h2 id="2-创建并切换分支"><a href="#2-创建并切换分支" class="headerlink" title="2. 创建并切换分支"></a>2. 创建并切换分支</h2><p>为避免直接在主分支上工作，每个开发者应创建自己的特性分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-branch</span><br></pre></td></tr></table></figure><p>上述命令会创建一个名为<code>feature-branch</code>的新分支，并立即切换到该分支。如果只是创建一个新分支，不切换到该分支，可使用<code>git branch feature-branch</code>。</p><h2 id="3-开发与提交"><a href="#3-开发与提交" class="headerlink" title="3. 开发与提交"></a>3. 开发与提交</h2><p>在特性分支上进行开发，定期提交代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提交信息：描述本次修改内容&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-同步远程仓库更新"><a href="#4-同步远程仓库更新" class="headerlink" title="4. 同步远程仓库更新"></a>4. 同步远程仓库更新</h2><blockquote><p><strong>在开发过程中，需定期从远程主分支获取最新代码并合并到本地，避免后续合并冲突!!</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin main</span><br><span class="line">git merge origin/main</span><br></pre></td></tr></table></figure><p>当然,上述的命令也可以通过一条命令实现:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><p>具体的步骤可以参考<a href="https://help.github.com/articles/syncing-a-fork/">GitHub帮助文档-Syncing a fork</a>。</p><h2 id="5-推送分支到远程仓库"><a href="#5-推送分支到远程仓库" class="headerlink" title="5. 推送分支到远程仓库"></a>5. 推送分支到远程仓库</h2><p>完成某段功能时，将本地分支推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-branch</span><br></pre></td></tr></table></figure><h2 id="6-创建-Pull-Request"><a href="#6-创建-Pull-Request" class="headerlink" title="6. 创建 Pull Request"></a>6. 创建 Pull Request</h2><p>在GitHub等平台上，从自己的特性分支向主分支发起Pull Request（PR）。</p><h2 id="7-代码审查"><a href="#7-代码审查" class="headerlink" title="7. 代码审查"></a>7. 代码审查</h2><p>团队成员审查PR中的代码变更，可提出修改建议或直接在网页上进行评论。</p><h2 id="8-修改与反馈"><a href="#8-修改与反馈" class="headerlink" title="8. 修改与反馈"></a>8. 修改与反馈</h2><p>根据审查意见，在本地修改代码后提交，并推送到远程分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment"># 添加修改</span></span><br><span class="line">git commit --amend <span class="comment"># 修改最近一次提交</span></span><br><span class="line">git push origin feature-branch --force-with-lease <span class="comment"># 强制推送，注意保护已有工作</span></span><br></pre></td></tr></table></figure><h2 id="9-合并-Pull-Request"><a href="#9-合并-Pull-Request" class="headerlink" title="9. 合并 Pull Request"></a>9. 合并 Pull Request</h2><p>审查通过后，项目管理员或有权限的成员合并PR到主分支。</p><h2 id="10-删除已合并的分支（可选）"><a href="#10-删除已合并的分支（可选）" class="headerlink" title="10. 删除已合并的分支（可选）"></a>10. 删除已合并的分支（可选）</h2><p>保持仓库整洁，合并后可考虑删除远程和本地的特性分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-branch</span><br><span class="line">git push origin --delete feature-branch</span><br></pre></td></tr></table></figure><h2 id="11-更新本地主分支"><a href="#11-更新本地主分支" class="headerlink" title="11. 更新本地主分支"></a>11. 更新本地主分支</h2><p>最后，拉取并合并最新的主分支到本地，为下一轮开发做准备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>Git多人开发是较为复杂的话题,这里介绍一种基础的模式,即<code>Feature-branch</code>的模式,适合小型团队.进阶到大型团队,可能会需要更加深入的<code>Git flow</code>开发流.</p><p>多人协作开发时,主分支是公共的,所以需要使用分支来隔离开发。因此通常会创建开发分支。开发过程中,<strong>不断关注当前远程主分支的最新状态</strong>,减少发生合并冲突的可能.在本地完成开发</p><p>在本地开发完成后,再将本地分支推送到远程开发分支,申请合并到远程主分支即可。</p><h4 id="参考链接-Feature-branch开发流-GIT-FLOW开发流"><a href="#参考链接-Feature-branch开发流-GIT-FLOW开发流" class="headerlink" title="参考链接:Feature-branch开发流 GIT-FLOW开发流"></a>参考链接:<a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow">Feature-branch开发流</a> <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">GIT-FLOW开发流</a></h4></blockquote><blockquote><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题:"></a>可能遇到的问题:</h3><ol><li><p><strong>冲突:</strong> 分支合并时,如果存在冲突,需要手动解决。这里我推荐使用<br>  IDE的Git工具,而不是git diff命令.它会自动提示冲突的位置,有更强的文本比对能力。也更加直观.以Jetbrains为例,相关的插件可以参考<a href="https://www.jetbrains.com/help/idea/git-plugin.html">Git插件</a>。</p></li><li><p>开发过程需要切换分支,但需要保留工作区的状态,可以使用<code>git stash</code>命令。具体可以参考<a href="https://www.atlassian.com/git/tutorials/git-stash">Git stash命令</a>。</p></li><li><p>另外强烈推荐一个Git命令的学习网站,它提供可视化的Git分支树示,方便理解Git的分支管理流程: <a href="https://git-school.github.io/visualizing-git/">Git-Visualize</a> or<br>  <a href="https://learngitbranching.js.org/?locale=zh_CN">Learning-git-branching</a>.根据我的经验,大约三四个小时可以刷完,通过项目中不断使用相信能有较好的掌握.</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Baidu API Python Library</title>
      <link href="/chushing/1999/05/20/DeepL/"/>
      <url>/chushing/1999/05/20/DeepL/</url>
      
        <content type="html"><![CDATA[<h1 id="DeepL-Python-Library"><a href="#DeepL-Python-Library" class="headerlink" title="DeepL Python Library"></a>DeepL Python Library</h1><p><a href="https://pypi.org/project/deepl/"><img src="https://img.shields.io/pypi/v/deepl.svg" alt="PyPI version"></a><br><a href="https://pypi.org/project/deepl/"><img src="https://img.shields.io/pypi/pyversions/deepl.svg" alt="Supported Python versions"></a><br><a href="https://github.com/DeepLcom/deepl-python/blob/main/LICENSE"><img src="https://img.shields.io/badge/license-MIT-blueviolet.svg" alt="License: MIT"></a></p><p>The <a href="https://www.deepl.com/docs-api?utm_source=github&utm_medium=github-python-readme">DeepL API</a> is a language translation API that allows other<br>computer programs to send texts and documents to DeepL’s servers and receive<br>high-quality translations. This opens a whole universe of opportunities for<br>developers: any translation product you can imagine can now be built on top of<br>DeepL’s best-in-class translation technology.</p><p>The DeepL Python library offers a convenient way for applications written in<br>Python to interact with the DeepL API. We intend to support all API functions<br>with the library, though support for new features may be added to the library<br>after they’re added to the API.</p><h2 id="Getting-an-authentication-key"><a href="#Getting-an-authentication-key" class="headerlink" title="Getting an authentication key"></a>Getting an authentication key</h2><p>To use the DeepL Python Library, you’ll need an API authentication key. To get a<br>key, <a href="https://www.deepl.com/pro?utm_source=github&utm_medium=github-python-readme#developer">please create an account here</a>. With a DeepL API Free<br>account you can translate up to 500,000 characters&#x2F;month for free.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>The library can be installed from <a href="https://pypi.org/project/deepl/">PyPI</a> using pip:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade deepl</span><br></pre></td></tr></table></figure><p>If you need to modify this source code, install the dependencies using poetry:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry install</span><br></pre></td></tr></table></figure><p>On Ubuntu 22.04 an error might occur: <code>ModuleNotFoundError: No module named  &#39;cachecontrol&#39;</code>. Use the workaround <code>sudo apt install python3-cachecontrol</code> as<br>explained in this <a href="https://bugs.launchpad.net/ubuntu/+source/poetry/+bug/1958227">bug report</a>.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>The library is tested with Python versions 3.6 to 3.11.</p><p>The <code>requests</code> module is used to perform HTTP requests; the minimum is version<br>2.0.</p><p>Starting in 2024, we will drop support for older Python versions that have<br>reached official end-of-life. You can find the Python versions and support<br>timelines <a href="https://devguide.python.org/versions/">here</a>.<br>To continue using this library, you should update to Python 3.8+.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Import the package and construct a <code>Translator</code>. The first argument is a string<br>containing your API authentication key as found in your<br><a href="https://www.deepl.com/pro-account/?utm_source=github&utm_medium=github-python-readme">DeepL Pro Account</a>.</p><p>Be careful not to expose your key, for example when sharing source code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> deepl</span><br><span class="line"></span><br><span class="line">auth_key = <span class="string">&quot;f63c02c5-f056-...&quot;</span>  <span class="comment"># Replace with your key</span></span><br><span class="line">translator = deepl.Translator(auth_key)</span><br><span class="line"></span><br><span class="line">result = translator.translate_text(<span class="string">&quot;Hello, world!&quot;</span>, target_lang=<span class="string">&quot;FR&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.text)  <span class="comment"># &quot;Bonjour, le monde !&quot;</span></span><br></pre></td></tr></table></figure><p>This example is for demonstration purposes only. In production code, the<br>authentication key should not be hard-coded, but instead fetched from a<br>configuration file or environment variable.</p><p><code>Translator</code> accepts additional options, see <a href="#configuration">Configuration</a><br>for more information.</p><h3 id="Translating-text"><a href="#Translating-text" class="headerlink" title="Translating text"></a>Translating text</h3><p>To translate text, call <code>translate_text()</code>. The first argument is a string<br>containing the text you want to translate, or a list of strings if you want to<br>translate multiple texts.</p><p><code>source_lang</code> and <code>target_lang</code> specify the source and target language codes<br>respectively. The <code>source_lang</code> is optional, if it is unspecified the source<br>language will be auto-detected.</p><p>Language codes are <strong>case-insensitive</strong> strings according to ISO 639-1, for<br>example <code>&#39;DE&#39;</code>, <code>&#39;FR&#39;</code>, <code>&#39;JA&#39;&#39;</code>. Some target languages also include the regional<br>variant according to ISO 3166-1, for example <code>&#39;EN-US&#39;</code>, or <code>&#39;PT-BR&#39;</code>. The full<br>list of supported languages is in the<br><a href="https://www.deepl.com/docs-api/translating-text/?utm_source=github&utm_medium=github-python-readme">API documentation</a>.</p><p>There are additional optional arguments to control translation, see<br><a href="#text-translation-options">Text translation options</a> below.</p><p><code>translate_text()</code> returns a <code>TextResult</code>, or a list of <code>TextResult</code>s<br>corresponding to your input text(s). <code>TextResult</code> has two properties: <code>text</code> is<br>the translated text, and <code>detected_source_lang</code> is the detected source language<br>code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Translate text into a target language, in this case, French:</span></span><br><span class="line">result = translator.translate_text(<span class="string">&quot;Hello, world!&quot;</span>, target_lang=<span class="string">&quot;FR&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.text)  <span class="comment"># &quot;Bonjour, le monde !&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Translate multiple texts into British English</span></span><br><span class="line">result = translator.translate_text(</span><br><span class="line">    [<span class="string">&quot;お元気ですか？&quot;</span>, <span class="string">&quot;¿Cómo estás?&quot;</span>], target_lang=<span class="string">&quot;EN-GB&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].text)  <span class="comment"># &quot;How are you?&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">0</span>].detected_source_lang)  <span class="comment"># &quot;JA&quot; the language code for Japanese</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">1</span>].text)  <span class="comment"># &quot;How are you?&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result[<span class="number">1</span>].detected_source_lang)  <span class="comment"># &quot;ES&quot; the language code for Spanish</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Translate into German with less and more Formality:</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    translator.translate_text(</span><br><span class="line">        <span class="string">&quot;How are you?&quot;</span>, target_lang=<span class="string">&quot;DE&quot;</span>, formality=<span class="string">&quot;less&quot;</span></span><br><span class="line">    )</span><br><span class="line">)  <span class="comment"># &#x27;Wie geht es dir?&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    translator.translate_text(</span><br><span class="line">        <span class="string">&quot;How are you?&quot;</span>, target_lang=<span class="string">&quot;DE&quot;</span>, formality=<span class="string">&quot;more&quot;</span></span><br><span class="line">    )</span><br><span class="line">)  <span class="comment"># &#x27;Wie geht es Ihnen?&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Text-translation-options"><a href="#Text-translation-options" class="headerlink" title="Text translation options"></a>Text translation options</h4><p>In addition to the input text(s) argument, the available <code>translate_text()</code><br>arguments are:</p><ul><li><code>source_lang</code>: Specifies the source language code, but may be omitted to<br>auto-detect the source language.</li><li><code>target_lang</code>: Required. Specifies the target language code.</li><li><code>split_sentences</code>: specify how input text should be split into sentences,<br>default: <code>&#39;on&#39;</code>.<ul><li><code>&#39;on&#39;&#39;</code> (<code>SplitSentences.ON</code>): input text will be split into sentences<br>using both newlines and punctuation.</li><li><code>&#39;off&#39;</code> (<code>SplitSentences.OFF</code>): input text will not be split into<br>sentences. Use this for applications where each input text contains only<br>one sentence.</li><li><code>&#39;nonewlines&#39;</code> (<code>SplitSentences.NO_NEWLINES</code>): input text will be split<br>into sentences using punctuation but not newlines.</li></ul></li><li><code>preserve_formatting</code>: controls automatic-formatting-correction. Set to <code>True</code><br>to prevent automatic-correction of formatting, default: <code>False</code>.</li><li><code>formality</code>: controls whether translations should lean toward informal or<br>formal language. This option is only available for some target languages, see<br><a href="#listing-available-languages">Listing available languages</a>.<ul><li><code>&#39;less&#39;</code> (<code>Formality.LESS</code>): use informal language.</li><li><code>&#39;more&#39;</code> (<code>Formality.MORE</code>): use formal, more polite language.</li></ul></li><li><code>glossary</code>: specifies a glossary to use with translation, either as a string<br>containing the glossary ID, or a <code>GlossaryInfo</code> as returned by<br><code>get_glossary()</code>.</li><li><code>context</code>: specifies additional context to influence translations, that is not<br>translated itself. Note this is an <strong>alpha feature</strong>: it may be deprecated at<br>any time, or incur charges if it becomes generally available.<br>See the <a href="https://www.deepl.com/docs-api/translating-text/?utm_source=github&utm_medium=github-python-readme">API documentation</a> for more information and<br>example usage.</li><li><code>tag_handling</code>: type of tags to parse before translation, options are <code>&#39;html&#39;</code><br>and <code>&#39;xml&#39;</code>.</li></ul><p>The following options are only used if <code>tag_handling</code> is <code>&#39;xml&#39;</code>:</p><ul><li><code>outline_detection</code>: specify <code>False</code> to disable automatic tag detection,<br>default is <code>True</code>.</li><li><code>splitting_tags</code>: list of XML tags that should be used to split text into<br>sentences. Tags may be specified as an array of strings (<code>[&#39;tag1&#39;, &#39;tag2&#39;]</code>),<br>or a comma-separated list of strings (<code>&#39;tag1,tag2&#39;</code>). The default is an empty<br>list.</li><li><code>non_splitting_tags</code>: list of XML tags that should not be used to split text<br>into sentences. Format and default are the same as for <code>splitting_tags</code>.</li><li><code>ignore_tags</code>: list of XML tags that containing content that should not be<br>translated. Format and default are the same as for <code>splitting_tags</code>.</li></ul><p>For a detailed explanation of the XML handling options, see the<br><a href="https://www.deepl.com/docs-api/handling-xml/?utm_source=github&utm_medium=github-python-readme">API documentation</a>.</p><h3 id="Translating-documents"><a href="#Translating-documents" class="headerlink" title="Translating documents"></a>Translating documents</h3><p>To translate documents, you may call either <code>translate_document()</code> using file IO<br>objects, or <code>translate_document_from_filepath()</code> using file paths. For both<br>functions, the first and second arguments correspond to the input and output<br>files respectively.</p><p>Just as for the <code>translate_text()</code> function, the <code>source_lang</code> and<br><code>target_lang</code> arguments specify the source and target language codes.</p><p>There are additional optional arguments to control translation, see<br><a href="#document-translation-options">Document translation options</a> below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Translate a formal document from English to German</span></span><br><span class="line">input_path = <span class="string">&quot;/path/to/Instruction Manual.docx&quot;</span></span><br><span class="line">output_path = <span class="string">&quot;/path/to/Bedienungsanleitung.docx&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Using translate_document_from_filepath() with file paths </span></span><br><span class="line">    translator.translate_document_from_filepath(</span><br><span class="line">        input_path,</span><br><span class="line">        output_path,</span><br><span class="line">        target_lang=<span class="string">&quot;DE&quot;</span>,</span><br><span class="line">        formality=<span class="string">&quot;more&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Alternatively you can use translate_document() with file IO objects</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> in_file, <span class="built_in">open</span>(output_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">        translator.translate_document(</span><br><span class="line">            in_file,</span><br><span class="line">            out_file,</span><br><span class="line">            target_lang=<span class="string">&quot;DE&quot;</span>,</span><br><span class="line">            formality=<span class="string">&quot;more&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> deepl.DocumentTranslationException <span class="keyword">as</span> error:</span><br><span class="line">    <span class="comment"># If an error occurs during document translation after the document was</span></span><br><span class="line">    <span class="comment"># already uploaded, a DocumentTranslationException is raised. The</span></span><br><span class="line">    <span class="comment"># document_handle property contains the document handle that may be used to</span></span><br><span class="line">    <span class="comment"># later retrieve the document from the server, or contact DeepL support.</span></span><br><span class="line">    doc_id = error.document_handle.<span class="built_in">id</span></span><br><span class="line">    doc_key = error.document_handle.key</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error after uploading $<span class="subst">&#123;error&#125;</span>, id: $<span class="subst">&#123;doc_id&#125;</span> key: $<span class="subst">&#123;doc_key&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> deepl.DeepLException <span class="keyword">as</span> error:</span><br><span class="line">    <span class="comment"># Errors during upload raise a DeepLException</span></span><br><span class="line">    <span class="built_in">print</span>(error)</span><br></pre></td></tr></table></figure><p><code>translate_document()</code> and <code>translate_document_from_filepath()</code> are convenience<br>functions that wrap multiple API calls: uploading, polling status until the<br>translation is complete, and downloading. If your application needs to execute<br>these steps individually, you can instead use the following functions directly:</p><ul><li><code>translate_document_upload()</code>,</li><li><code>translate_document_get_status()</code> (or<br><code>translate_document_wait_until_done()</code>), and</li><li><code>translate_document_download()</code></li></ul><h4 id="Document-translation-options"><a href="#Document-translation-options" class="headerlink" title="Document translation options"></a>Document translation options</h4><p>In addition to the input file, output file, <code>source_lang</code> and <code>target_lang</code><br>arguments, the available <code>translate_document()</code> and<br><code>translate_document_from_filepath()</code> arguments are:</p><ul><li><code>formality</code>: same as in <a href="#text-translation-options">Text translation options</a>.</li><li><code>glossary</code>: same as in <a href="#text-translation-options">Text translation options</a>.</li></ul><h3 id="Glossaries"><a href="#Glossaries" class="headerlink" title="Glossaries"></a>Glossaries</h3><p>Glossaries allow you to customize your translations using user-defined terms.<br>Multiple glossaries can be stored with your account, each with a user-specified<br>name and a uniquely-assigned ID.</p><h4 id="Creating-a-glossary"><a href="#Creating-a-glossary" class="headerlink" title="Creating a glossary"></a>Creating a glossary</h4><p>You can create a glossary with your desired terms and name using<br><code>create_glossary()</code>. Each glossary applies to a single source-target language<br>pair. Note: Glossaries are only supported for some language pairs, see<br><a href="#listing-available-glossary-languages">Listing available glossary languages</a><br>for more information. The entries should be specified as a dictionary.</p><p>If successful, the glossary is created and stored with your DeepL account, and<br>a <code>GlossaryInfo</code> object is returned including the ID, name, languages and entry<br>count.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create an English to German glossary with two terms:</span></span><br><span class="line">entries = &#123;<span class="string">&quot;artist&quot;</span>: <span class="string">&quot;Maler&quot;</span>, <span class="string">&quot;prize&quot;</span>: <span class="string">&quot;Gewinn&quot;</span>&#125;</span><br><span class="line">my_glossary = translator.create_glossary(</span><br><span class="line">    <span class="string">&quot;My glossary&quot;</span>,</span><br><span class="line">    source_lang=<span class="string">&quot;EN&quot;</span>,</span><br><span class="line">    target_lang=<span class="string">&quot;DE&quot;</span>,</span><br><span class="line">    entries=entries,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">f&quot;Created &#x27;<span class="subst">&#123;my_glossary.name&#125;</span>&#x27; (<span class="subst">&#123;my_glossary.glossary_id&#125;</span>) &quot;</span></span><br><span class="line">    <span class="string">f&quot;<span class="subst">&#123;my_glossary.source_lang&#125;</span>-&gt;<span class="subst">&#123;my_glossary.target_lang&#125;</span> &quot;</span></span><br><span class="line">    <span class="string">f&quot;containing <span class="subst">&#123;my_glossary.entry_count&#125;</span> entries&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># Example: Created &#x27;My glossary&#x27; (559192ed-8e23-...) EN-&gt;DE containing 2 entries</span></span><br></pre></td></tr></table></figure><p>You can also upload a glossary downloaded from the DeepL website using<br><code>create_glossary_from_csv()</code>. Instead of supplying the entries as a dictionary,<br>specify the CSV data as <code>csv_data</code> either as a file-like object or string or<br>bytes containing file content:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Open the CSV file assuming UTF-8 encoding. If your file contains a BOM,</span></span><br><span class="line"><span class="comment"># consider using encoding=&#x27;utf-8-sig&#x27; instead.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/path/to/glossary_file.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,  encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> csv_file:</span><br><span class="line">    csv_data = csv_file.read()  <span class="comment"># Read the file contents as a string</span></span><br><span class="line">    my_csv_glossary = translator.create_glossary_from_csv(</span><br><span class="line">        <span class="string">&quot;CSV glossary&quot;</span>,</span><br><span class="line">        source_lang=<span class="string">&quot;EN&quot;</span>,</span><br><span class="line">        target_lang=<span class="string">&quot;DE&quot;</span>,</span><br><span class="line">        csv_data=csv_data,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>The <a href="https://www.deepl.com/docs-api/managing-glossaries/supported-glossary-formats/?utm_source=github&utm_medium=github-python-readme">API documentation</a> explains the expected CSV format in<br>detail.</p><h4 id="Getting-listing-and-deleting-stored-glossaries"><a href="#Getting-listing-and-deleting-stored-glossaries" class="headerlink" title="Getting, listing and deleting stored glossaries"></a>Getting, listing and deleting stored glossaries</h4><p>Functions to get, list, and delete stored glossaries are also provided:</p><ul><li><code>get_glossary()</code> takes a glossary ID and returns a <code>GlossaryInfo</code> object for a<br>stored glossary, or raises an exception if no such glossary is found.</li><li><code>list_glossaries()</code> returns a list of <code>GlossaryInfo</code> objects corresponding to<br>all of your stored glossaries.</li><li><code>delete_glossary()</code> takes a glossary ID or <code>GlossaryInfo</code> object and deletes<br>the stored glossary from the server, or raises an exception if no such<br>glossary is found.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Retrieve a stored glossary using the ID</span></span><br><span class="line">glossary_id = <span class="string">&quot;559192ed-8e23-...&quot;</span></span><br><span class="line">my_glossary = translator.get_glossary(glossary_id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find and delete glossaries named &#x27;Old glossary&#x27;</span></span><br><span class="line">glossaries = translator.list_glossaries()</span><br><span class="line"><span class="keyword">for</span> glossary <span class="keyword">in</span> glossaries:</span><br><span class="line">    <span class="keyword">if</span> glossary.name == <span class="string">&quot;Old glossary&quot;</span>:</span><br><span class="line">        translator.delete_glossary(glossary)</span><br></pre></td></tr></table></figure><h4 id="Listing-entries-in-a-stored-glossary"><a href="#Listing-entries-in-a-stored-glossary" class="headerlink" title="Listing entries in a stored glossary"></a>Listing entries in a stored glossary</h4><p>The <code>GlossaryInfo</code> object does not contain the glossary entries, but instead<br>only the number of entries in the <code>entry_count</code> property.</p><p>To list the entries contained within a stored glossary, use<br><code>get_glossary_entries()</code> providing either the <code>GlossaryInfo</code> object or glossary<br>ID:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entries = translator.get_glossary_entries(my_glossary)</span><br><span class="line"><span class="built_in">print</span>(entries)  <span class="comment"># &quot;&#123;&#x27;artist&#x27;: &#x27;Maler&#x27;, &#x27;prize&#x27;: &#x27;Gewinn&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Using-a-stored-glossary"><a href="#Using-a-stored-glossary" class="headerlink" title="Using a stored glossary"></a>Using a stored glossary</h4><p>You can use a stored glossary for text translation by setting the <code>glossary</code><br>argument to either the glossary ID or <code>GlossaryInfo</code> object. You must also<br>specify the <code>source_lang</code> argument (it is required when using a glossary):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;The artist was awarded a prize.&quot;</span></span><br><span class="line">with_glossary = translator.translate_text(</span><br><span class="line">    text, source_lang=<span class="string">&quot;EN&quot;</span>, target_lang=<span class="string">&quot;DE&quot;</span>, glossary=my_glossary,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(with_glossary)  <span class="comment"># &quot;Der Maler wurde mit einem Gewinn ausgezeichnet.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For comparison, the result without a glossary:</span></span><br><span class="line">without_glossary = translator.translate_text(text, target_lang=<span class="string">&quot;DE&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(without_glossary)  <span class="comment"># &quot;Der Künstler wurde mit einem Preis ausgezeichnet.&quot;</span></span><br></pre></td></tr></table></figure><p>Using a stored glossary for document translation is the same: set the <code>glossary</code><br>argument and specify the <code>source_lang</code> argument:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">translator.translate_document(</span><br><span class="line">    in_file, out_file, source_lang=<span class="string">&quot;EN&quot;</span>, target_lang=<span class="string">&quot;DE&quot;</span>, glossary=my_glossary,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The <code>translate_document()</code>, <code>translate_document_from_filepath()</code> and<br><code>translate_document_upload()</code> functions all support the <code>glossary</code> argument.</p><h3 id="Checking-account-usage"><a href="#Checking-account-usage" class="headerlink" title="Checking account usage"></a>Checking account usage</h3><p>To check account usage, use the <code>get_usage()</code> function.</p><p>The returned <code>Usage</code> object contains three usage subtypes: <code>character</code>,<br><code>document</code> and <code>team_document</code>. Depending on your account type, some usage<br>subtypes may be invalid; this can be checked using the <code>valid</code> property. For API<br>accounts:</p><ul><li><code>usage.character.valid</code> is <code>True</code>,</li><li><code>usage.document.valid</code> and <code>usage.team_document.valid</code> are <code>False</code>.</li></ul><p>Each usage subtype (if valid) has <code>count</code> and <code>limit</code> properties giving the<br>amount used and maximum amount respectively, and the <code>limit_reached</code> property<br>that checks if the usage has reached the limit. The top level <code>Usage</code> object has<br>the <code>any_limit_reached</code> property to check all usage subtypes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usage = translator.get_usage()</span><br><span class="line"><span class="keyword">if</span> usage.any_limit_reached:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Translation limit reached.&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> usage.character.valid:</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">f&quot;Character usage: <span class="subst">&#123;usage.character.count&#125;</span> of <span class="subst">&#123;usage.character.limit&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> usage.document.valid:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Document usage: <span class="subst">&#123;usage.document.count&#125;</span> of <span class="subst">&#123;usage.document.limit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Listing-available-languages"><a href="#Listing-available-languages" class="headerlink" title="Listing available languages"></a>Listing available languages</h3><p>You can request the list of languages supported by DeepL for text and documents<br>using the <code>get_source_languages()</code> and <code>get_target_languages()</code> functions. They<br>both return a list of <code>Language</code> objects.</p><p>The <code>name</code> property gives the name of the language in English, and the <code>code</code><br>property gives the language code. The <code>supports_formality</code> property only appears<br>for target languages, and indicates whether the target language supports the<br>optional <code>formality</code> parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Source languages:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> translator.get_source_languages():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;language.name&#125;</span> (<span class="subst">&#123;language.code&#125;</span>)&quot;</span>)  <span class="comment"># Example: &quot;German (DE)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Target languages:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> translator.get_target_languages():</span><br><span class="line">    <span class="keyword">if</span> language.supports_formality:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;language.name&#125;</span> (<span class="subst">&#123;language.code&#125;</span>) supports formality&quot;</span>)</span><br><span class="line">        <span class="comment"># Example: &quot;Italian (IT) supports formality&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;language.name&#125;</span> (<span class="subst">&#123;language.code&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="comment"># Example: &quot;Lithuanian (LT)&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Listing-available-glossary-languages"><a href="#Listing-available-glossary-languages" class="headerlink" title="Listing available glossary languages"></a>Listing available glossary languages</h4><p>Glossaries are supported for a subset of language pairs. To retrieve those<br>languages use the <code>get_glossary_languages()</code> function, which returns an array<br>of <code>GlossaryLanguagePair</code> objects. Each has <code>source_lang</code> and <code>target_lang</code><br>properties indicating that that pair of language codes is supported.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">glossary_languages = translator.get_glossary_languages()</span><br><span class="line"><span class="keyword">for</span> language_pair <span class="keyword">in</span> glossary_languages:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;language_pair.source_lang&#125;</span> to <span class="subst">&#123;language_pair.target_lang&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># Example: &quot;EN to DE&quot;, &quot;DE to EN&quot;, etc.</span></span><br></pre></td></tr></table></figure><p>You can also find the list of supported glossary language pairs in the<br><a href="https://www.deepl.com/docs-api/managing-glossaries/?utm_source=github&utm_medium=github-python-readme">API documentation</a>.</p><p>Note that glossaries work for all target regional-variants: a glossary for the<br>target language English (<code>&quot;EN&quot;</code>) supports translations to both American English<br>(<code>&quot;EN-US&quot;</code>) and British English (<code>&quot;EN-GB&quot;</code>).</p><h3 id="Writing-a-Plugin"><a href="#Writing-a-Plugin" class="headerlink" title="Writing a Plugin"></a>Writing a Plugin</h3><p>If you use this library in an application, please identify the application with<br><code>deepl.Translator.set_app_info</code>, which needs the name and version of the app:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translator = deepl.Translator(...).set_app_info(<span class="string">&quot;sample_python_plugin&quot;</span>, <span class="string">&quot;1.0.2&quot;</span>)</span><br></pre></td></tr></table></figure><p>This information is passed along when the library makes calls to the DeepL API.<br>Both name and version are required. Please note that setting the <code>User-Agent</code> header<br>via <code>deepl.http_client.user_agent</code> will override this setting, if you need to use this,<br>please manually identify your Application in the <code>User-Agent</code> header.</p><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>All module functions may raise <code>deepl.DeepLException</code> or one of its subclasses.<br>If invalid arguments are provided, they may raise the standard exceptions<br><code>ValueError</code> and <code>TypeError</code>.</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><h4 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h4><p>Logging can be enabled to see the HTTP requests sent and responses received by<br>the library. Enable and control logging using Python’s <code>logging</code> module, for<br>example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig()</span><br><span class="line">logging.getLogger(<span class="string">&#x27;deepl&#x27;</span>).setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure><h4 id="Server-URL-configuration"><a href="#Server-URL-configuration" class="headerlink" title="Server URL configuration"></a>Server URL configuration</h4><p>You can override the URL of the DeepL API by specifying the <code>server_url</code><br>argument when constructing a <code>deepl.Translator</code>. This may be useful for testing<br>purposes. You <strong>do not</strong> need to specify the URL to distinguish API Free and API<br>Pro accounts, the library selects the correct URL automatically.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_url = <span class="string">&quot;http://user:pass@localhost:3000&quot;</span></span><br><span class="line">translator = deepl.Translator(..., server_url=server_url)</span><br></pre></td></tr></table></figure><h4 id="Proxy-configuration"><a href="#Proxy-configuration" class="headerlink" title="Proxy configuration"></a>Proxy configuration</h4><p>You can configure a proxy by specifying the <code>proxy</code> argument when constructing a<br><code>deepl.Translator</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy = <span class="string">&quot;http://user:pass@10.10.1.10:3128&quot;</span></span><br><span class="line">translator = deepl.Translator(..., proxy=proxy)</span><br></pre></td></tr></table></figure><p>The proxy argument is passed to the underlying <code>requests</code> session, see the<br><a href="https://docs.python-requests.org/en/latest/user/advanced/#proxies">documentation for requests</a>; a dictionary of schemes to<br>proxy URLs is also accepted.</p><h4 id="Override-SSL-verification"><a href="#Override-SSL-verification" class="headerlink" title="Override SSL verification"></a>Override SSL verification</h4><p>You can control how <code>requests</code> performs SSL verification by specifying the<br><code>verify_ssl</code> option when constructing a <code>deepl.Translator</code>, for example to<br>disable SSL certificate verification:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translator = deepl.Translator(..., verify_ssl=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>This option is passed to the underlying <code>requests</code> session as the <code>verify</code><br>option, see the <a href="https://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification">documentation for requests</a>.</p><h4 id="Anonymous-platform-information"><a href="#Anonymous-platform-information" class="headerlink" title="Anonymous platform information"></a>Anonymous platform information</h4><p>By default, we send some basic information about the platform the client library is running on with each request, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent">here for an explanation</a>. This data is completely anonymous and only used to improve our product, not track any individual users. If you do not wish to send this data, you can opt-out when creating your <code>deepl.Translator</code> object by setting the <code>send_platform_info</code> flag like so:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translator = deepl.Translator(..., send_platform_info=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>You can also customize the <code>user_agent</code> by setting its value explicitly before constructing your <code>deepl.Translator</code> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deepl.http_client.user_agent = <span class="string">&#x27;my custom user agent&#x27;</span></span><br><span class="line">translator = deepl.Translator(os.environ[<span class="string">&quot;DEEPL_AUTH_KEY&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="Command-Line-Interface"><a href="#Command-Line-Interface" class="headerlink" title="Command Line Interface"></a>Command Line Interface</h2><p>The library can be run on the command line supporting all API functions. Use the<br><code>--help</code> option for usage information:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m deepl --help</span><br></pre></td></tr></table></figure><p>The CLI requires your DeepL authentication key specified either as the<br><code>DEEPL_AUTH_KEY</code> environment variable, through the <code>keyring</code> module, or<br>using the <code>--auth-key</code> option, for example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m deepl --auth-key=YOUR_AUTH_KEY usage</span><br></pre></td></tr></table></figure><p>Note that the <code>--auth-key</code> argument must appear <em>before</em> the command argument.<br>To use the <a href="https://pypi.org/project/keyring/">keyring</a> module, set the<br><em>DEEPL_AUTH_KEY</em> field in the service <em>deepl</em> to your API key.<br>The recognized commands are:</p><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">text</td><td align="left">translate text(s)</td></tr><tr><td align="left">document</td><td align="left">translate document(s)</td></tr><tr><td align="left">usage</td><td align="left">print usage information for the current billing period</td></tr><tr><td align="left">languages</td><td align="left">print available languages</td></tr><tr><td align="left">glossary</td><td align="left">create, list, and remove glossaries</td></tr></tbody></table><p>For example, to translate text:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m deepl --auth-key=YOUR_AUTH_KEY text --to=DE &quot;Text to be translated.&quot;</span><br></pre></td></tr></table></figure><p>Wrap text arguments in quotes to prevent the shell from splitting sentences into<br>words.</p><h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p>If you experience problems using the library, or would like to request a new<br>feature, please open an <a href="https://www.github.com/DeepLcom/deepl-python/issues">issue</a>.</p><h2 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h2><p>We welcome Pull Requests, please read the<br><a href="CONTRIBUTING.md">contributing guidelines</a>.</p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>Execute the tests using <code>pytest</code>. The tests communicate with the DeepL API using<br>the auth key defined by the <code>DEEPL_AUTH_KEY</code> environment variable.</p><p>Be aware that the tests make DeepL API requests that contribute toward your API<br>usage.</p><p>The test suite may instead be configured to communicate with the mock-server<br>provided by <a href="https://www.github.com/DeepLcom/deepl-mock">deepl-mock</a>. Although most test cases work for either,<br>some test cases work only with the DeepL API or the mock-server and will be<br>otherwise skipped. The test cases that require the mock-server trigger server<br>errors and test the client error-handling. To execute the tests using<br>deepl-mock, run it in another terminal while executing the tests. Execute the<br>tests using <code>pytest</code> with the <code>DEEPL_MOCK_SERVER_PORT</code> and <code>DEEPL_SERVER_URL</code><br>environment variables defined referring to the mock-server.</p>]]></content>
      
      
      <categories>
          
          <category> Life Musing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DuanQuanRu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
